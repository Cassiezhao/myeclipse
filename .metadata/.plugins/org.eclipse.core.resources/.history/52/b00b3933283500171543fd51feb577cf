package com.cassie.tankegame2;



//1、一个类要实现监听的步骤
//a.实现相应的接口 keyListener,MouseListener..
//b.把接口的处理方法根据需要重新编写
//c.在事件源上注册监听
//d.事件传递是靠事件对象

import javax.swing.JFrame;

import org.omg.CORBA.PUBLIC_MEMBER;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.*;
/*
* 坦克大战V1.0
* 1、画坦克
* */
public class Tankgame extends JFrame {
	Mypanel mp;
	public static void main(String[] args) {
		
		Tankgame mtk = new Tankgame();
	}
	
	public Tankgame()
	{
		mp = new Mypanel();
		this.add(mp);
		//注册监听
		this.addKeyListener(mp);
		this.setSize(400,400);
		this.setVisible(true);
		
	}

}



//我的面板
class Mypanel extends JPanel implements KeyListener
{
	//定义一个我的坦克
	Hero hero = null;
	int y ;
	int x ;
	public Mypanel()
	{
		hero = new Hero(100, 100);
		x = hero.getX();
		y = hero.getY();
	}

	public void drawTank(int x,int y,Graphics g,int direct,int type) 
	{
		
		switch (type) 
		{
			case 0:
					g.setColor(Color.CYAN);
					break;
			case 1:
					g.setColor(Color.yellow);
					break;
		}
		//判断方向
		switch (direct) 
		{
			case 0://向上
				//画出我的坦克
				//1、画出左面的矩形
				g.fill3DRect(x, y, 5, 30, false);
				//2、画出右边的矩形
				g.fill3DRect(x + 15, y, 5, 30, false);
				//3、画出中间矩形
				g.fill3DRect(x + 5, y+5, 10, 20, false);
				//4、画出圆形
				g.fillOval(x + 5, y + 10, 10, 10);
				//5、画出线
				g.drawLine(x + 10, y + 20, x + 10, y);
				break;
		}
		
	}
	
	//重写paint函数
	public void paint(Graphics g)
	{	
		super.paint(g);
		g.fillRect(0, 0, 400, 400);
		this.drawTank(hero.getX(), hero.getY(), g, 0, 0);		
	}
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub、
		//键按下处理a表示向左 s表示下 w 上 d右
		if (e.getKeyCode() == KeyEvent.VK_W) {
			
			//设置我的坦克的方向
			this.hero.setDirect(0);
			this.hero.moveUp();
		}
		else if (e.getKeyCode() == KeyEvent.VK_D) {
			this.hero.setDirect(1);
			this.hero.moveRight();
		}
		else if (e.getKeyCode() == KeyEvent.VK_S)
		{
			this.hero.setDirect(2);
			this.hero.moveDown();	
		}
		else if (e.getKeyCode() == KeyEvent.VK_A)
		{
			this.hero.setDirect(3);
			this.hero.moveLeft();
		}
		
		//必须重新绘制panel，调用repaint()函数
		this.repaint();
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}

class Tank
{
	//表示坦克的横坐标
	int x = 0;
	//表示坦克的纵坐标
	int y = 0;
	
	//坦克方向
	//0表示上 1表示右 2 表示下  3表示左
	int direct = 0;
	
	//设置坦克的速度
	int speed;
	
	public int getSpeed() {
		return speed;
	}

	public void setSpeed(int speed) {
		this.speed = speed;
	}

	public int getDirect() {
		return direct;
	}

	public void setDirect(int direct) {
		this.direct = direct;
	}

	public Tank (int x,int y) 
	{
		this.x = x;
		this.y = y;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}	
	
}


//我的坦克
class Hero extends Tank
{
	
	public Hero( int x,int y) 
	{
		super(x, y);
	}
	//坦克向上移动
	public void moveUp() 
	{
		y-=speed;
	}
	//坦克向右移动
	public void moveRight() 
	{
		x+=speed;
	}
	//坦克向下移动
	public void moveDown() 
	{
		y+=speed;
	}
	//坦克向左移动
	public void moveLeft()
	{
		x-=speed;
	}	
}