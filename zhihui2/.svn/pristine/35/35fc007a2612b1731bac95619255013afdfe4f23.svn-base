package chris.dao;

import java.util.List;

import org.hibernate.LockMode;
import org.hibernate.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.stereotype.Service;

import chris.pojo.Guide;

/**
 * A data access object (DAO) providing persistence and search support for Guide
 * entities. Transaction control of the save(), update() and delete() operations
 * can directly support Spring container-managed transactions or they can be
 * augmented to handle user-managed Spring transactions. Each of these methods
 * provides additional information for how to configure it for the desired type
 * of transaction control.
 * 
 * @see chris.pojo.Guide
 * @author MyEclipse Persistence Tools
 */
@Service("GuideDAO")
public class GuideDAO extends HibernateDaoSupport {
	private static final Logger log = LoggerFactory.getLogger(GuideDAO.class);
	// property constants
	public static final String GUIDENAME = "guidename";
	public static final String GUIDENUM = "guidenum";
	public static final String GSEX = "gsex";
	public static final String IDCARD = "idcard";
	public static final String GTEL = "gtel";
	public static final String WORKAGE = "workage";
	public static final String LEVEL = "level";
	public static final String LANGUAGE = "language";
	public static final String SCHOOL = "school";
	public static final String EXPERICE = "experice";
	public static final String HOME = "home";
	public static final String STATE = "state";
	public static final String NOWLOCATION = "nowlocation";
	public static final String ONLINE_P = "onlineP";
	public static final String UPLINE_P = "uplineP";
	public static final String SCORE = "score";
	public static final String INFO = "info";
	public static final String YOUKE_MNUM = "youkeMnum";
	public static final String PERSON = "person";
	public static final String JINGDU = "jingdu";
	public static final String WEIDU = "weidu";
	public static final String AGE = "age";
	public static final String DISEASES = "diseases";
	public static final String HONOR = "honor";
	public static final String WEIGHT = "weight";
	public static final String BLOOD = "blood";
	public static final String HEGE = "hege";
	public static final String LIANXUJIANGJIE = "lianxujiangjie";
	public static final String CHOUTINGJIANGJIE = "choutingjiangjie";
	public static final String PINGLEVEL = "pinglevel";
	public static final String HEIGHT = "height";

	protected void initDao() {
		// do nothing
	}

	public void save(Guide transientInstance) {
		log.debug("saving Guide instance");
		try {
			getHibernateTemplate().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	public void delete(Guide persistentInstance) {
		log.debug("deleting Guide instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	public Guide findById(java.lang.Integer id) {
		log.debug("getting Guide instance with id: " + id);
		try {
			Guide instance = (Guide) getHibernateTemplate().get(
					"chris.pojo.Guide", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	public List<Guide> findByExample(Guide instance) {
		log.debug("finding Guide instance by example");
		try {
			List<Guide> results = (List<Guide>) getHibernateTemplate()
					.findByExample(instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Guide instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from Guide as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	public List<Guide> findByGuidename(Object guidename) {
		return findByProperty(GUIDENAME, guidename);
	}

	public List<Guide> findByGuidenum(Object guidenum) {
		return findByProperty(GUIDENUM, guidenum);
	}

	public List<Guide> findByGsex(Object gsex) {
		return findByProperty(GSEX, gsex);
	}

	public List<Guide> findByIdcard(Object idcard) {
		return findByProperty(IDCARD, idcard);
	}

	public List<Guide> findByGtel(Object gtel) {
		return findByProperty(GTEL, gtel);
	}

	public List<Guide> findByWorkage(Object workage) {
		return findByProperty(WORKAGE, workage);
	}

	public List<Guide> findByLevel(Object level) {
		return findByProperty(LEVEL, level);
	}

	public List<Guide> findByLanguage(Object language) {
		return findByProperty(LANGUAGE, language);
	}

	public List<Guide> findBySchool(Object school) {
		return findByProperty(SCHOOL, school);
	}

	public List<Guide> findByExperice(Object experice) {
		return findByProperty(EXPERICE, experice);
	}

	public List<Guide> findByHome(Object home) {
		return findByProperty(HOME, home);
	}

	public List<Guide> findByState(Object state) {
		return findByProperty(STATE, state);
	}

	public List<Guide> findByNowlocation(Object nowlocation) {
		return findByProperty(NOWLOCATION, nowlocation);
	}

	public List<Guide> findByOnlineP(Object onlineP) {
		return findByProperty(ONLINE_P, onlineP);
	}

	public List<Guide> findByUplineP(Object uplineP) {
		return findByProperty(UPLINE_P, uplineP);
	}

	public List<Guide> findByScore(Object score) {
		return findByProperty(SCORE, score);
	}

	public List<Guide> findByInfo(Object info) {
		return findByProperty(INFO, info);
	}

	public List<Guide> findByYoukeMnum(Object youkeMnum) {
		return findByProperty(YOUKE_MNUM, youkeMnum);
	}

	public List<Guide> findByPerson(Object person) {
		return findByProperty(PERSON, person);
	}

	public List<Guide> findByJingdu(Object jingdu) {
		return findByProperty(JINGDU, jingdu);
	}

	public List<Guide> findByWeidu(Object weidu) {
		return findByProperty(WEIDU, weidu);
	}

	public List<Guide> findByAge(Object age) {
		return findByProperty(AGE, age);
	}

	public List<Guide> findByDiseases(Object diseases) {
		return findByProperty(DISEASES, diseases);
	}

	public List<Guide> findByHonor(Object honor) {
		return findByProperty(HONOR, honor);
	}

	public List<Guide> findByWeight(Object weight) {
		return findByProperty(WEIGHT, weight);
	}

	public List<Guide> findByBlood(Object blood) {
		return findByProperty(BLOOD, blood);
	}

	public List<Guide> findByHege(Object hege) {
		return findByProperty(HEGE, hege);
	}

	public List<Guide> findByLianxujiangjie(Object lianxujiangjie) {
		return findByProperty(LIANXUJIANGJIE, lianxujiangjie);
	}

	public List<Guide> findByChoutingjiangjie(Object choutingjiangjie) {
		return findByProperty(CHOUTINGJIANGJIE, choutingjiangjie);
	}

	public List<Guide> findByPinglevel(Object pinglevel) {
		return findByProperty(PINGLEVEL, pinglevel);
	}

	public List<Guide> findByHeight(Object height) {
		return findByProperty(HEIGHT, height);
	}

	public List findAll() {
		log.debug("finding all Guide instances");
		try {
			String queryString = "from Guide";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	public Guide merge(Guide detachedInstance) {
		log.debug("merging Guide instance");
		try {
			Guide result = (Guide) getHibernateTemplate().merge(
					detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	public void attachDirty(Guide instance) {
		log.debug("attaching dirty Guide instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public void attachClean(Guide instance) {
		log.debug("attaching clean Guide instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	
	public static GuideDAO getFromApplicationContext(ApplicationContext ctx) {
		return (GuideDAO) ctx.getBean("GuideDAO");
	}
	public List<Guide> findAll(int page,int rows){
		Query query=getSession().createQuery("from Guide order by guideid");
		query.setFirstResult((page-1)*rows);
		query.setMaxResults(rows);
		return query.list();
	}
	
	public List<Guide> findbyMid(int a){
		Query query=getSession().createQuery("from Guide g where g.guidem.guidemid=?  order by guideid");
		query.setInteger(0, a);
		return query.list();
	}
	
	public Guide findById2(String a){
		Query query=getSession().createQuery("from Guide g where g.guidenum=?");
		query.setString(0, a);
		
		return (Guide) query.list().get(0);
	}
	
	public List<Guide> findByGname(String a){
		Query query=getSession().createQuery("from Guide g  where g.guidename like '%"+a+"%' order by guideid" );
		return query.list();
	}
	
	public int findMaxPage(int rows){
		int maxrow=0;
		int maxpage=1;
		String hql="select count(guideid) from Guide";
		Query query=getSessionFactory().getCurrentSession().createQuery(hql);
		maxrow=Integer.parseInt(query.list().get(0).toString());
		if(maxrow==0){
			maxpage=1;
		}else{
			maxpage=maxrow/rows==0?maxrow/rows:maxrow/rows+1;
		}
		
		return maxpage;
	}
}